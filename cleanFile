#Script DigitaleBox pour prétraitement des listes électorales 
# 2020-05-19 V.1.8 - Vincent PAUL-VICTOR support@digitalebox.fr
# 
# PYTHON PANDAS NUMPY
# 
#
# 1/ FORMAT DU CSV
#
# le fichier source doit être en 
# __csv 
# __séparateur , 
# __utf-8
#
# 
# 2/ RENOMMER LES COLONNES DU CSV
#
# Pas besoin de créer des colonnes vides, le script crée des colonnes si absentes 
# Il faut impérativement renommer les colonnes existantes du csv :
#
# __'prenom' (colonnes avec l'ensemble des prénoms)
# __'nom'
# __'sexe' (civilité, genre)
# __'numero' (1,2,31,371...)
# __'adresse'
# __'ville'
# __'date' (date de naissance au format jj/mm/aaaa)
# __'note'
# __'mot clef'
# __'email'
# __'mobile' 

# EN CAS D'ERREUR : changer le nom des colonnes
#
# 3/ INDIQUER LE FICHIER A TRAITER
#
# 4/ INDIQUER LE FICHIER DE SORTIE


# INDIQUER LE FICHIER A TRAITER

import pandas as pd
import numpy as np
monFichier = '/Users/VPV/Desktop/LISTE TERRAIN.csv' 
input = (monFichier)
df = pd.read_csv(input,low_memory = False)




# creation de colonne si absent du fichier

if 'categorie' not in df:
	df.insert(loc=0, column='categorie', value='2')    
if 'note' not in df:
	df.insert(loc=0, column='note', value='')
if 'mot clef' not in df:
	df.insert(loc=0, column='mot clef', value='')
if 'sexe' not in df:
	df.insert(loc=0, column='sexe', value='0')
if 'prenom' not in df:
    df.insert(loc=0, column='prenom', value='prenom a renseigner') 
if 'pays' not in df:
	df.insert(loc=0, column='pays', value='FR')
else:
    df['pays']=df['pays'].astype(str)
    df['pays']=df['pays'].replace(['FRANCE','france','France'],'FR')
    df['pays']=df['pays'].replace(['nan'],'N/A')
if 'ville' not in df:
	df.insert(loc=0, column='ville', value='N/A')
if 'cp' not in df:
	df.insert(loc=0, column='cp', value='N/A')
if 'adresse' not in df:
	df.insert(loc=0, column='adresse', value='N/A')

if 'date' not in df:
	df.insert(loc=0, column='date', value='N/A')
if 'mobile' not in df:
    df.insert(loc=0, column='mobile', value='N/A')
else:
    df['mobile']=df['mobile'].fillna('N/A')


if 'email' not in df:
    df.insert(loc=0, column='email', value='N/A')
else:
    df['email']=df['email'].fillna('N/A')



# Email 


df['email']=df['email'].astype(str)
df['email']=df['email'].str.replace(',', '.', regex=True)
df['email']=df['email'].str.replace(';', '.', regex=True)
df['email']=df['email'].str.replace('^ ', '', regex=True)
df['email']=df['email'].str.replace(' $', '', regex=True)
    


# Change le format date dd-mm-yyyy > yyyy-mm-dd


df['date']=df['date'].astype(str)
# creation d'une colonnes qui va recevoir l'extraction de la date 
df.insert(loc=0, column='jour',value='N/A')
df.insert(loc=0, column='mois',value='N/A')
df.insert(loc=0, column='annee',value='N/A')
df['jour'] = df['date'].str[:2]
df['mois'] = df['date'].str[3:-5]
df['annee'] = df['date'].str[6:]
df['date'] = df['annee']+ "-" + df['mois']+ "-" + df['jour']
#transforme les colonnes vides en N/A
df['date'] = df['date'].replace(['--na','--N/'],'N/A' , regex=True)
df=df.drop(['jour', 'mois', 'annee'], axis=1)


# Sexe change monsieur madame et les cellules vides par 0,1,2

df['sexe']=df['sexe'].fillna('0')
df['sexe']=df['sexe'].astype(str)
#transforme 1.0 et 2.0 en 1 et 2
df['sexe']=df['sexe'].str.replace('\.0$', '', regex=True)
df['sexe']=df['sexe'].str.replace(' ', '', regex=True)
df['sexe']=df['sexe'].replace(['monsieur','Monsieur','MONSIEUR','Mr', 'MR','M.','M','mr','m'],'2')
df['sexe']=df['sexe'].replace(['madame','Madame','MADAME','Ms','MS','Mme','MME','Mlle','MLLE','Mme','F','mme'],'1')    


#Adresse enlever caractères spéciaux pour la geolocalisation

df['adresse']=df['adresse'].fillna('N/A')
df['adresse']=df['adresse'].astype(str)
df['adresse']=df['adresse'].str.replace(',', '', regex=True)
df['adresse']=df['adresse'].str.replace('^ ', '', regex=True)
df['adresse']=df['adresse'].str.replace(' $', '', regex=True)



# Code postal

df['cp']=df['cp'].fillna('N/A')
df['cp']=df['cp'].astype(str)
df['cp']=df['cp'].str.replace('\.0$', '', regex=True)


# mobile supprime caractères spéciaux

df['mobile']=df['mobile'].fillna('N/A') 
df['mobile']=df['mobile'].astype(str)
df['mobile']=df['mobile'].str.replace(' ', '', regex=True)
df['mobile']=df['mobile'].str.replace('.', '', regex=True)
df['mobile']=df['mobile'].str.replace('-', '', regex=True)
df['mobile']=df['mobile'].str.replace('_', '', regex=True)
df['mobile']=df['mobile'].str.replace('(', '', regex=True)
df['mobile']=df['mobile'].str.replace(')', '', regex=True)
df['mobile']=df['mobile'].str.replace('^06', '+336', regex=True)
df['mobile']=df['mobile'].str.replace('^07', '+337', regex=True)
df['mobile']=df['mobile'].str.replace('^6', '+336', regex=True)
df['mobile']=df['mobile'].str.replace('^7', '+337', regex=True)

# split master csv in package

groups = df.groupby(np.arange(len(df.index))/24000)
for (frameno, frame) in groups:
    frame.to_csv("/Users/VPV/Desktop/Out%s.csv" % frameno,header=True,index=False,encoding="utf8")

